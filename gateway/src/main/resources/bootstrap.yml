server:
  port: 9100

spring:
  application:
    name: gateway
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true  #开启使用eureka上 application.name 能力
          lower-case-service-id: true
      default-filters:  # 全局 熔断器
        - name: Hystrix
          args:
            name: default
            fallbackUri: forward:/fallback_Test_A
      routes:             #配置路由规则
      - id: a
        uri: lb://test-a
        predicates:
        - Path= /**
        filters:
        - StripPrefix= 0  #截取url路径
        - name: Retry     #重试
          args:
            retrier: 3
            statuses: BAD_GATEWAY
        - name: Hystrix
          args:
            name: studyA
            fallbackUri: forward:/fallback_Test_A
      - id: b
        uri: lb://test-b
        predicates:
        - Path= /user

hystrix:
  command:
    test-a:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 20000
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 20000

feign:
  hystrix:
    enabled: true

ribbon:
  #请求处理的超时时间
  ReadTimeout: 16000
  #请求连接的超时时间
  ConnectTimeout: 4000
  MaxAutoRetries: 0
  MaxAutoRetriesNextServer: 1

eureka:
  client:
    healthcheck:
      enabled: true
    serviceUrl:
      defaultZone: http://localhost:8601/eureka/
  instance:
    lease-expiration-duration-in-seconds: 120 #告诉服务端，如果我2s之内没有给你发心跳，就代表我“死”了，将我踢出掉。
    lease-renewal-interval-in-seconds: 60  #每间隔1s，向服务端发送一次心跳，证明自己依然”存活“

management:
  endpoint:
    shutdown:
      enabled: true

info:
  app:
    name: gateway
    version: v1.0.1

#  1. 如果hystrix.command.default.execution.timeout.enabled为true,则会有两个执行方法超时的配置,一个就是ribbon的ReadTimeout,一个就是熔断器hystrix的timeoutInMilliseconds, 此时谁的值小谁生效
#
#  2. 如果hystrix.command.default.execution.timeout.enabled为false,则熔断器不进行超时熔断,而是根据ribbon的ReadTimeout抛出的异常而熔断,也就是取决于ribbon
#
#  3. ribbon的ConnectTimeout,配置的是请求服务的超时时间,除非服务找不到,或者网络原因,这个时间才会生效
#
#  4. ribbon还有MaxAutoRetries对当前实例的重试次数,MaxAutoRetriesNextServer对切换实例的重试次数, 如果ribbon的ReadTimeout超时,或者ConnectTimeout连接超时,会进行重试操作
#
#  5. 由于ribbon的重试机制,通常熔断的超时时间需要配置的比ReadTimeout长,ReadTimeout比ConnectTimeout长,否则还未重试,就熔断了
#  6. 为了确保重试机制的正常运作,理论上（以实际情况为准）建议hystrix的超时时间为:(1 + MaxAutoRetries + MaxAutoRetriesNextServer) * ReadTimeout